//
// Created by dsiedel on 24/06/2021.
//

#ifndef FETA_GAUSS_LINEAR_SEGMENT_HXX
#define FETA_GAUSS_LINEAR_SEGMENT_HXX

#include "feta/geometry/geometry.hxx"

namespace feta::geometry {

    struct LinearSegment{
        static constexpr intg dim_element = 1;
        static constexpr intg dim_jacobian = 1;
        static constexpr intg num_nodes = 2;
    };

    template<intg k_quad>
    struct GaussLinearSegment;

    template<>
    struct GaussLinearSegment<1>
    {
        using Ref = LinearSegment;
        static constexpr intg dim_quadrature = 1;
        static constexpr std::array<real, Ref::num_nodes * dim_quadrature> points = {
                0.5000000000000000, 0.5000000000000000
        };
        static constexpr std::array<real, dim_quadrature> weights = {
                1.0000000000000000
        };
        static constexpr std::array<std::array<real, Ref::num_nodes * Ref::dim_jacobian>, dim_quadrature> jacobians = {
                {
                        {
                                -1.0000000000000000, 1.0000000000000000
                        }
                }
        };
    };

    template<>
    struct GaussLinearSegment<2>
    {
        using Ref = LinearSegment;
        static constexpr intg dim_quadrature = 2;
        static constexpr std::array<real, Ref::num_nodes * dim_quadrature> points = {
                0.7886751345948129, 0.2113248654051871,
                0.2113248654051871, 0.7886751345948129
        };
        static constexpr std::array<real, dim_quadrature> weights = {
                0.5000000000000000,
                0.5000000000000000
        };
        static constexpr std::array<std::array<real, Ref::num_nodes * Ref::dim_jacobian>, dim_quadrature> jacobians = {
                {
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        }
                }
        };
    };

    template<>
    struct GaussLinearSegment<3>
    {
        using Ref = LinearSegment;
        static constexpr intg dim_quadrature = 3;
        static constexpr std::array<real, Ref::num_nodes * dim_quadrature> points = {
                0.8872983346207417, 0.1127016653792583,
                0.5000000000000000, 0.5000000000000000,
                0.1127016653792583, 0.8872983346207417
        };
        static constexpr std::array<real, dim_quadrature> weights = {
                0.2777777777777777,
                0.4444444444444446,
                0.2777777777777777
        };
        static constexpr std::array<std::array<real, Ref::num_nodes * Ref::dim_jacobian>, dim_quadrature> jacobians = {
                {
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        }
                }
        };
    };

    template<>
    struct GaussLinearSegment<4>
    {
        using Ref = LinearSegment;
        static constexpr intg dim_quadrature = 4;
        static constexpr std::array<real, Ref::num_nodes * dim_quadrature> points = {
                0.9305681557970262, 0.0694318442029737,
                0.6699905217924281, 0.3300094782075719,
                0.3300094782075719, 0.6699905217924281,
                0.0694318442029737, 0.9305681557970262
        };
        static constexpr std::array<real, dim_quadrature> weights = {
                0.1739274225687268,
                0.3260725774312733,
                0.3260725774312733,
                0.1739274225687268
        };
        static constexpr std::array<std::array<real, Ref::num_nodes * Ref::dim_jacobian>, dim_quadrature> jacobians = {
                {
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        }
                }
        };
    };

    template<>
    struct GaussLinearSegment<5>
    {
        using Ref = LinearSegment;
        static constexpr intg dim_quadrature = 5;
        static constexpr std::array<real, Ref::num_nodes * dim_quadrature> points = {
                0.9530899229693320, 0.0469100770306680,
                0.7692346550528415, 0.2307653449471584,
                0.5000000000000000, 0.5000000000000000,
                0.2307653449471584, 0.7692346550528415,
                0.0469100770306680, 0.9530899229693320
        };
        static constexpr std::array<real, dim_quadrature> weights = {
                0.1184634425280945,
                0.2393143352496831,
                0.2844444444444445,
                0.2393143352496831,
                0.1184634425280945
        };
        static constexpr std::array<std::array<real, Ref::num_nodes * Ref::dim_jacobian>, dim_quadrature> jacobians = {
                {
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        }
                }
        };
    };

    template<>
    struct GaussLinearSegment<6>
    {
        using Ref = LinearSegment;
        static constexpr intg dim_quadrature = 6;
        static constexpr std::array<real, Ref::num_nodes * dim_quadrature> points = {
                0.9662347571015760, 0.0337652428984240,
                0.8306046932331322, 0.1693953067668678,
                0.6193095930415985, 0.3806904069584016,
                0.3806904069584016, 0.6193095930415985,
                0.1693953067668678, 0.8306046932331322,
                0.0337652428984240, 0.9662347571015760
        };
        static constexpr std::array<real, dim_quadrature> weights = {
                0.0856622461895852,
                0.1803807865240694,
                0.2339569672863455,
                0.2339569672863455,
                0.1803807865240694,
                0.0856622461895852
        };
        static constexpr std::array<std::array<real, Ref::num_nodes * Ref::dim_jacobian>, dim_quadrature> jacobians = {
                {
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        }
                }
        };
    };

    template<>
    struct GaussLinearSegment<7>
    {
        using Ref = LinearSegment;
        static constexpr intg dim_quadrature = 7;
        static constexpr std::array<real, Ref::num_nodes * dim_quadrature> points = {
                0.9745539561713792, 0.0254460438286208,
                0.8707655927996972, 0.1292344072003028,
                0.7029225756886985, 0.2970774243113014,
                0.5000000000000000, 0.5000000000000000,
                0.2970774243113014, 0.7029225756886985,
                0.1292344072003028, 0.8707655927996972,
                0.0254460438286208, 0.9745539561713792
        };
        static constexpr std::array<real, dim_quadrature> weights = {
                0.0647424830844351,
                0.1398526957446383,
                0.1909150252525594,
                0.2089795918367346,
                0.1909150252525594,
                0.1398526957446383,
                0.0647424830844351
        };
        static constexpr std::array<std::array<real, Ref::num_nodes * Ref::dim_jacobian>, dim_quadrature> jacobians = {
                {
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        }
                }
        };
    };

    template<>
    struct GaussLinearSegment<8>
    {
        using Ref = LinearSegment;
        static constexpr intg dim_quadrature = 8;
        static constexpr std::array<real, Ref::num_nodes * dim_quadrature> points = {
                0.9801449282487681, 0.0198550717512319,
                0.8983332387068134, 0.1016667612931866,
                0.7627662049581645, 0.2372337950418355,
                0.5917173212478249, 0.4082826787521751,
                0.4082826787521751, 0.5917173212478249,
                0.2372337950418355, 0.7627662049581645,
                0.1016667612931866, 0.8983332387068134,
                0.0198550717512319, 0.9801449282487681
        };
        static constexpr std::array<real, dim_quadrature> weights = {
                0.0506142681451882,
                0.1111905172266871,
                0.1568533229389437,
                0.1813418916891810,
                0.1813418916891810,
                0.1568533229389437,
                0.1111905172266871,
                0.0506142681451882
        };
        static constexpr std::array<std::array<real, Ref::num_nodes * Ref::dim_jacobian>, dim_quadrature> jacobians = {
                {
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        },
                        {
                                -1.0000000000000000, 1.0000000000000000
                        }
                }
        };
    };

//    reference_points = [
//    [0.5000000000000000, 0.5000000000000000],
//    ]
//    reference_weights = [
//    1.0000000000000000,
//    ]
//    jacobian = [
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    ]
//    elif integration_order == 2:
//    reference_points = [
//    [0.7886751345948129, 0.2113248654051871],
//    [0.2113248654051871, 0.7886751345948129],
//    ]
//    reference_weights = [
//    0.5000000000000000,
//    0.5000000000000000,
//    ]
//    jacobian = [
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    ]
//    elif integration_order == 3:
//    reference_points = [
//    [0.8872983346207417, 0.1127016653792583],
//    [0.5000000000000000, 0.5000000000000000],
//    [0.1127016653792583, 0.8872983346207417],
//    ]
//    reference_weights = [
//    0.2777777777777777,
//    0.4444444444444446,
//    0.2777777777777777,
//    ]
//    jacobian = [
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    ]
//    elif integration_order == 4:
//    reference_points = [
//    [0.9305681557970262, 0.0694318442029737],
//    [0.6699905217924281, 0.3300094782075719],
//    [0.3300094782075719, 0.6699905217924281],
//    [0.0694318442029737, 0.9305681557970262],
//    ]
//    reference_weights = [
//    0.1739274225687268,
//    0.3260725774312733,
//    0.3260725774312733,
//    0.1739274225687268,
//    ]
//    jacobian = [
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    ]
//    elif integration_order == 5:
//    reference_points = [
//    [0.9530899229693320, 0.0469100770306680],
//    [0.7692346550528415, 0.2307653449471584],
//    [0.5000000000000000, 0.5000000000000000],
//    [0.2307653449471584, 0.7692346550528415],
//    [0.0469100770306680, 0.9530899229693320],
//    ]
//    reference_weights = [
//    0.1184634425280945,
//    0.2393143352496831,
//    0.2844444444444445,
//    0.2393143352496831,
//    0.1184634425280945,
//    ]
//    jacobian = [
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    ]
//    elif integration_order == 6:
//    reference_points = [
//    [0.9662347571015760, 0.0337652428984240],
//    [0.8306046932331322, 0.1693953067668678],
//    [0.6193095930415985, 0.3806904069584016],
//    [0.3806904069584016, 0.6193095930415985],
//    [0.1693953067668678, 0.8306046932331322],
//    [0.0337652428984240, 0.9662347571015760],
//    ]
//    reference_weights = [
//    0.0856622461895852,
//    0.1803807865240694,
//    0.2339569672863455,
//    0.2339569672863455,
//    0.1803807865240694,
//    0.0856622461895852,
//    ]
//    jacobian = [
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    ]
//    elif integration_order == 7:
//    reference_points = [
//    [0.9745539561713792, 0.0254460438286208],
//    [0.8707655927996972, 0.1292344072003028],
//    [0.7029225756886985, 0.2970774243113014],
//    [0.5000000000000000, 0.5000000000000000],
//    [0.2970774243113014, 0.7029225756886985],
//    [0.1292344072003028, 0.8707655927996972],
//    [0.0254460438286208, 0.9745539561713792],
//    ]
//    reference_weights = [
//    0.0647424830844351,
//    0.1398526957446383,
//    0.1909150252525594,
//    0.2089795918367346,
//    0.1909150252525594,
//    0.1398526957446383,
//    0.0647424830844351,
//    ]
//    jacobian = [
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    ]
//    elif integration_order == 8:
//    reference_points = [
//    [0.9801449282487681, 0.0198550717512319],
//    [0.8983332387068134, 0.1016667612931866],
//    [0.7627662049581645, 0.2372337950418355],
//    [0.5917173212478249, 0.4082826787521751],
//    [0.4082826787521751, 0.5917173212478249],
//    [0.2372337950418355, 0.7627662049581645],
//    [0.1016667612931866, 0.8983332387068134],
//    [0.0198550717512319, 0.9801449282487681],
//    ]
//    reference_weights = [
//    0.0506142681451882,
//    0.1111905172266871,
//    0.1568533229389437,
//    0.1813418916891810,
//    0.1813418916891810,
//    0.1568533229389437,
//    0.1111905172266871,
//    0.0506142681451882,
//    ]
//    jacobian = [
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    [
//    [-1.0000000000000000, 1.0000000000000000],
//    ],
//    ]
}

#endif //FETA_GAUSS_LINEAR_SEGMENT_HXX
